#+OPTIONS: title:t toc:t date:nil author:t email:nil num:nil
#+TITLE: Naptime
#+DATE: [2016-06-09 Thu]
#+AUTHOR: Eric Bailey
#+EMAIL: naptakerband@gmail.com
#+LANGUAGE: en
#+CREATOR: Emacs 25.0.94.1 (Org mode 8.3.4)

* Instrument Definitions
  :PROPERTIES:
  :tangle:   include/instruments.ily
  :END:
#+BEGIN_SRC LilyPond
\version "2.19.24"

\include "templates/predefined-instruments/context-creating-function.ily"
#+END_SRC
** Vox
#+BEGIN_SRC LilyPond
\newInstrument "Vox"
\with {
  instrumentName = "Vocals"
  %% shortInstrumentName = "V"
  \RemoveEmptyStaves
  \override VerticalAxisGroup #'remove-first = ##t
  \clef F
}
"default"
#+END_SRC
** Guitar
#+BEGIN_SRC LilyPond
\newInstrument "Guitar"
\with {
  instrumentName = "Guitar"
  %% shortInstrumentName = "G"
  \RemoveEmptyStaves
  \override VerticalAxisGroup #'remove-first = ##t
  \override StringNumber      #'stencil      = ##f
  \clef "G_8"
}
\with {
  \consists "Staff_performer"
  midiInstrument = "electric guitar (clean)"
}
"default"
#+END_SRC
** Bass
#+BEGIN_SRC LilyPond
\newInstrument "Bass"
\with {
  instrumentName = "Bass"
  %% shortInstrumentName = "B"
  \RemoveEmptyStaves
  \override VerticalAxisGroup #'remove-first = ##t
  \override StringNumber      #'stencil      = ##f
  \clef F
  \transposition c
}
\with {
  \consists "Staff_performer"
  midiInstrument = "electric bass (finger)"
}
"default"
#+END_SRC
* Preamble
:PROPERTIES:
:tangle:   include/preamble.ily
:END:
#+BEGIN_SRC LilyPond
%% \include "articulate.ly"

fuzzOn     = \set midiInstrument = #"overdriven guitar"
fuzzOff    = \set midiInstrument = #"electric guitar (clean)"

xOn        = \deadNotesOn
xOff       = \deadNotesOff

fretMagic  = {
  \once \override TabNoteHead #'transparent = ##t
  \once \override NoteHead #'transparent = ##t
  \once \override Stem #'transparent = ##t
  \once \override Flag #'transparent = ##t
  \once \override NoteHead #'no-ledgers = ##t
  \once \override Glissando #'(bound-details left padding) = #0.3
}

voltaFirst = \markup { 1. \text \italic { play 1x and 4x only } }

%% http://lsr.di.unimi.it/LSR/Item?id=198
%% see also http://lsr.di.unimi.it/LSR/Item?id=190
theCoda    = {
  \once \override Score.RehearsalMark #'break-visibility = #begin-of-line-invisible
  \once \override Score.RehearsalMark.font-size = #6
  \mark \markup { \musicglyph #"scripts.coda" }
}

%% http://lsr.dsi.unimi.it/LSR/Snippet?id=664
toCoda     = {
  %% the align part
  \once \override Score.RehearsalMark #'self-alignment-X = #RIGHT
  \once \override Score.RehearsalMark #'break-visibility = #begin-of-line-invisible
  \once \override Score.RehearsalMark #'direction = #DOWN
  %% prefered size
  \once \override Score.RehearsalMark #'font-size = #-2
  \mark \markup {
    \center-column {
      \concat { \lower #1 { "D.S. al  " } { \musicglyph #"scripts.coda" } }
      \italic { \lower #1 { \small "play both endings" } }
    }
  }
}

breakingCoda = {
  \break
  \once \override Score.RehearsalMark.font-size = #6
  \mark \markup { \musicglyph #"scripts.coda" }
}
#+END_SRC
* Scheme Hacks
  :PROPERTIES:
  :tangle:   include/naptaker.scm
  :END:
Tweak the paper and global staff size.
#+BEGIN_SRC scheme
;; (set-default-paper-size "arch a" 'landscape)
;; (set-global-staff-size 18)
(set-default-paper-size "letter" 'landscape)
(set-global-staff-size 14)
#+END_SRC

Custom drum notation.
#+BEGIN_SRC scheme
(define preston-drums
  (alist->hash-table
   '((bassdrum      default #f -3)
     (snare         default #f  1)
     (closedhihat   cross   #f  5)
     (halfopenhihat xcircle #f  5)
     (lowtom        default #f -1)
     (pedalhihat    cross   #f -5)
     (crashcymbal   cross   #f  6)
     (ridecymbal    cross   #f  4))))
#+END_SRC
** COMMENT Parenthesize
/Currently unused/
#+BEGIN_SRC scheme
(define ((my-stencils start) grob)
  (let* ((par-list (parentheses-item::calc-parenthesis-stencils grob))
         (null-par (grob-interpret-markup grob (markup #:null))))
    (if start
        (list (car par-list) null-par)
        (list null-par (cadr par-list)))))

(define startParenthesis
  (define-music-function (parser location note)
    (ly:music?)
    "Add an opened parenthesis to the left of `note"
    #{
      \once \override ParenthesesItem #'stencils = #(my-stencils #t)
      \parenthesize $note
    #}))

(define endParenthesis
  (define-music-function (parser location note)
    (ly:music?)
    "Add a closed parenthesis to the right of `note"
    #{
      \once \override ParenthesesItem #'stencils = #(my-stencils #f)
      \parenthesize $note
    #}))
#+END_SRC
** COMMENT Custom Line Breaks Engraver
/Currently unused/
#+BEGIN_SRC scheme
;; Slightly tweaked from David Nalesnik's work.
;; http://lists.gnu.org/archive/html/lilypond-user/2012-05/msg00381.html

(define (custom-line-breaks-engraver bar-list)
  (let* ((working-copy bar-list)
         (total (1+ (car working-copy))))
    (lambda (context)
      (make-engraver
       (acknowledgers
        ((paper-column-interface engraver grob source-engraver)
         (let ((internal-bar (ly:context-property context 'internalBarNumber)))
           (if (and (pair? working-copy)
                    (zero? (remainder internal-bar total))
                    (eq? #t (ly:grob-property grob 'non-musical)))
               (begin
                 (set! (ly:grob-property grob 'line-break-permission) 'force)
                 (if (null? (cdr working-copy))
                     (set! working-copy bar-list)
                     (set! working-copy (cdr working-copy)))
                 (set! total (+ total (car working-copy))))))))))))
#+END_SRC
** Naptaker Score
#+BEGIN_SRC scheme
(define Naptaker
  (define-music-function (parser location) ()
    "Return the makings of a Naptaker score."
    #{
      \new StaffGroup <<
        \new VoxVoice = vox <<
          { \gridGetMusic "meta" }
          { \gridGetMusic "vox" }
        >>
        <<
          \new GuitarVoice = gtr { \gridGetMusic "guitar" }
          \new TabStaff {
            %% \tabFullNotation
            \gridGetMusic "guitar"
          }
        >>
        <<
          \new BassVoice = bass { \gridGetMusic "bass" }
          \new TabStaff {
            %% \tabFullNotation
            \gridGetMusic "bass"
          }
        >>
        \new DrumStaff \with {
          drumStyleTable = #preston-drums
          instrumentName = "Drums"
          %% shortInstrumentName = "D"
          \RemoveEmptyStaves
          \override VerticalAxisGroup #'remove-first = ##t
        } {
          <<
            \new DrumVoice { \gridGetMusic "drums up" }
            \new DrumVoice
            \with {
              \remove "Rest_engraver"
              \remove "Multi_measure_rest_engraver"
            }
            \gridGetMusic "drums down"
          >>
        }
      >>
    #}))
#+END_SRC
** Template Initialization
:PROPERTIES:
:tangle:   include/naptaker.scm
:END:
#+BEGIN_SRC scheme
(define templateInit
  (define-void-function (parser location segments) (list?)
    (ly:debug (format #f "Initializing template with segment lengths: ~{~d ~}"
                      segments))
    (let* ((segment 0) (bar-number 1))
      (map (lambda (measures)
             (let ((this-bar-number bar-number))
               (set! segment (1+ segment))
               (set! bar-number (+ bar-number measures))
               #{
                 \gridSetSegmentTemplate $segment
                 \with {
                   barNumber = $this-bar-number
                   music     = {
                     #(make-music 'SkipEvent
                        'duration (ly:make-duration 0 0 measures 1))
                   }
                 }
               #}))
           segments))))
#+END_SRC
* Makefile
:PROPERTIES:
:tangle:   Makefile
:END:
#+BEGIN_SRC makefile
songdirs := $(dir $(wildcard songs/*/main.ly))
# songs    := $(notdir $(patsubst %/,%,$(songdirs)))
pdfs     := $(addsuffix main.pdf,$(songdirs))

ifeq ($(DEBUG),1)
	lilypond = lilypond -V
	output   =
else
	lilypond = lilypond -dwarning-as-error -dlog-file=$*/main
	output   = >$*/PROGRESS 2>/dev/null
endif

includes := -I $(PWD)/openlilylib -I $(PWD)/openlilylib/ly -I $(PWD)/include
defaults  = -djob-count=8 -dmidi-extension=mid

all: $(pdfs)

%/main.pdf: %/main.ly include/* %/include/* %/notes/* %/parts/*
	@echo -n 'Engraving $@ ... '
	@$(lilypond) $(defaults) $(includes) \
	-I $(PWD)/$*/include -o $*/main $< $(output)
	@echo "\xF0\x9F\x8E\xB5"

%/main.ly: %/README.org
	@mkdir -p $*/parts
	@emacsclient -e '(org-babel-tangle-file "$<")' >/dev/null 2>&1
#+END_SRC
